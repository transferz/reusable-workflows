name: Node Workflow | Production

on:
  workflow_call:
    inputs:
      GKE_NAME:
        type: string
        required: true
      GKE_ZONE:
        type: string
        required: true
      GKE_PROJECT:
        type: string
        required: true
      GCR_REGISTRY:
        type: string
        required: true
      GCR_REPOSITORY:
        type: string
        required: true 
      GCP_ACCOUNT_USER:
        type: string
        required: true
      HELM_NAMESPACE:
        type: string
        default: "staging"
      HELM_REPOSITORY:
        type: string
        required: true
      HELM_REGISTRY:
        type: string
        required: true
      HELM_ROLLOUT_TIMEOUT:
        default: "600s"
        type: string
      HELM_VALUES:
        type: string
        required: true
      HELM_CHART:
        type: string
        default: "service"
      HELM_CHART_VERSION:
        type: string
        default: "0.4.1"
      GITHUB_BRANCH:
        default: "master"
        type: string
      GITHUB_ORG:
        type: string
        required: true
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      GCP_ACCOUNT_KEY:
        required: true
      ACTIONS_SSH_KEY:
        required: true
      HELM_REGISTRY_KEY:
        required: true

env:
  HELM_EXPERIMENTAL_OCI: 1

jobs:
  define-variables:
    name: Retrive Variables
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      
      - name: Get commit version
        id: commit
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Get Release version
        id: version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
    
    outputs:
      commit: ${{ steps.commit.outputs.sha_short }}
      version: ${{ steps.version.outputs.VERSION }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-18.04
    needs: [ "define-variables" ]
    steps:
      - uses: actions/checkout@v1

      - uses: actions/checkout@v2
        with:
          repository: '${{ inputs.GITHUB_ORG }}/${{ inputs.HELM_REPOSITORY }}'
          path: ${{ inputs.HELM_REPOSITORY }}
          ref: ${{ inputs.GITHUB_BRANCH}}
          ssh-key: '${{ secrets.ACTIONS_SSH_KEY }}'

      - name: Gcloud Authentication
        uses: google-github-actions/auth@v0
        with:
          credentials_json:  ${{ secrets.GCP_ACCOUNT_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: '297.0.0'
          # service_account_email: ${{ secrets.GCP_ACCOUNT_EMAIL }}
          # service_account_key: ${{ secrets.GCP_ACCOUNT_KEY }}

      - name: Configure the docker credentials
        run: |
          gcloud auth configure-docker ${{ inputs.GKE_ZONE }} --quiet
          gcloud container clusters get-credentials ${{ inputs.GKE_NAME }} --zone ${{ inputs.GKE_ZONE }} --project ${{ inputs.GKE_PROJECT }}
      
      - name: Download and retag application Docker image
        id: retag-image
        env:
          IMAGE_TAG: ${{ needs.define-variables.outputs.commit }}
          VERSION_TAG: ${{ needs.define-variables.outputs.version }} 
        run: |
          docker pull ${{ inputs.GCR_REGISTRY }}/${{ inputs.GCR_REPOSITORY }}:${IMAGE_TAG}
          docker image tag ${{ inputs.GCR_REGISTRY }}/${{ inputs.GCR_REPOSITORY }}:${IMAGE_TAG} ${{ inputs.GCR_REGISTRY }}/${{ inputs.GCR_REPOSITORY }}:${VERSION_TAG}
          docker push ${{ inputs.GCR_REGISTRY }}/${{ inputs.GCR_REPOSITORY }}:${VERSION_TAG}

      - name: Deploy to K8S
        env:
          IMAGE_TAG: ${{ needs.define-variables.outputs.commit }}
          VERSION_TAG: ${{ needs.define-variables.outputs.version }} 
        run: |
          echo "${{ secrets.HELM_REGISTRY_KEY }}" | helm registry login ${{ inputs.HELM_REGISTRY }} --username ${{ inputs.GCP_ACCOUNT_USER }} --password-stdin

          if ! helm -n ${{ inputs.HELM_NAMESPACE }} upgrade --install ${{ github.event.repository.name }} --wait '--timeout=${{ inputs.HELM_ROLLOUT_TIMEOUT }}' -f ${{ inputs.HELM_REPOSITORY }}/${{ inputs.HELM_VALUES }} --set-string image.tag="${VERSION_TAG}" oci://${{ inputs.HELM_REGISTRY }}/${{ inputs.HELM_CHART }} --version '${{ inputs.HELM_CHART_VERSION }}' ; then
            kubectl -n ${{ inputs.HELM_NAMESPACE }} describe po -l app.kubernetes.io/version=${IMAGE_TAG} -l app.kubernetes.io/name=${{ github.event.repository.name }}
            kubectl -n ${{ inputs.HELM_NAMESPACE }} logs --tail=2000 -l app.kubernetes.io/version=${IMAGE_TAG} -l app.kubernetes.io/name=${{ github.event.repository.name }} --all-containers || true
            helm -n ${{ inputs.HELM_NAMESPACE }} rollback ${{ github.event.repository.name }} 0
            exit 1
          fi

      - name: Update staging value.yaml
        uses: mikefarah/yq@master
        env:
          VERSION_TAG: ${{ needs.define-variables.outputs.version }}
        with:
          cmd: yq -i ".image.tag = env(VERSION_TAG)" ${{ inputs.HELM_REPOSITORY }}/${{ inputs.HELM_VALUES }}
      
      - name: Push changes to git
        working-directory: ${{ inputs.HELM_REPOSITORY }}
        run: |
          echo "${{ secrets.ACTIONS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          git config --global user.name "GitHub Actions"
          git config --global user.email ${{ inputs.GTIHUB_ACTIONS_EMAIL }}

          git add .
          git commit -m "[skip ci] update snapshot version for ${{ github.event.repository.name }}"
          git pull origin master --rebase && git push

      - name: Slack Notification
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "deployments"
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON: " https://github.com/rtCamp.png?size=48"
          SLACK_MESSAGE: "Repository: ${{ github.event.repository.name }} | Relase Title: ${{ github.event.release.name }}"
          SLACK_TITLE: "Message"
          SLACK_USERNAME: "GitHub Actions"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}