name: Jave Workflow

on:
  workflow_call:
    inputs:
      JAVA_VERSION:
        type: string
        required: true
      GKE_NAME:
        type: string
        required: true
      GKE_ZONE:
        type: string
        required: true
      GKE_PROJECT:
        type: string
        required: true
      GCR_REGISTRY:
        type: string
        required: true
      GCP_ACCOUNT_USER:
        type: string
        required: true
      GCR_REPOSITORY:
        type: string
        required: true  
      HELM_CHART:
        type: string
        default: "service" 
      HELM_VALUES:
        type: string
        required: true
      HELM_NAMESPACE:
        type: string
        default: "staging"
      HELM_REPOSITORY:
        type: string
        required: true 
      HELM_ROLLOUT_TIMEOUT:
        default: "600s"
        type: string
      HELM_REGISTRY:
        type: string
        required: true
      HELM_CHART_VERSION:
        type: string
        default: "0.3.1"
      GTIHUB_ACTIONS_EMAIL:
        type: string
        required: true
      GATEWAY_URLS:
        type: string
        required: true
      GITHUB_ORG:
        type: string
        required: true
      GITHUB_BRANCH:
        default: "master"
        type: string
      README_URL:
        type: string
        required: true
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      GITHUB_REPO_USERNAME:
        required: true
      GITHUB_REPO_PASSWORD:
        required: true
      CC_TEST_REPORTER_ID:
        required: true
      ACTIONS_SSH_KEY:
        required: true
      GCP_ACCOUNT_KEY:
        required: true
      HELM_REGISTRY_KEY:
        required: true
      README_IO_API_KEY:
        required: true
env:
  GITHUB_REPO_USERNAME: ${{ secrets.GITHUB_REPO_USERNAME }}
  GITHUB_REPO_PASSWORD: ${{ secrets.GITHUB_REPO_PASSWORD }}
  HELM_EXPERIMENTAL_OCI: 1

jobs:
  formatting:
    if: github.ref == 'refs/heads/feature/**' || github.ref == 'refs/heads/master'
    name: Check code formatting
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v1
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-dependencies
        with:
          path: ~/.m2
          key: ${{ runner.os }}-codeformat-${{ env.cache-name }}-${{ hashFiles('pom.xml') }}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
      - name: Run Spotless Check
        run: mvn -B clean spotless:check --settings .github/settings.xml

  spotbugs:
    if: github.ref == 'refs/heads/feature/**' || github.ref == 'refs/heads/master'
    name: Check for bugs
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v1
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-dependencies
        with:
          path: ~/.m2
          key: ${{ runner.os }}-spotbugs-${{ env.cache-name }}-${{ hashFiles('pom.xml') }}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
      - name: Run SpotBugs Check
        run: mvn -B verify -DskipTests -DskipITs --settings .github/settings.xml
      - if: failure()
        run: mvn -B site --settings .github/settings.xml
      - if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: Spotbugs report
          path: target/site/*

  test:
    if: github.ref == 'refs/heads/feature/**' || github.ref == 'refs/heads/master'
    name: Run unit & integration tests
    runs-on: ubuntu-20.04
    needs: [formatting, spotbugs]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: aVeryHardPasswordToGuess
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1
      - name: Setup database
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-12
          psql postgresql://postgres@localhost/postgres < .docker/setup-postgres.sql
        env:
          PGPASSWORD: aVeryHardPasswordToGuess
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-dependencies
        with:
          path: ~/.m2
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('pom.xml') }}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
      - name: Maven Package
        run: mvn -B clean package -DskipTests -Dspotbugs.skip=true --settings .github/settings.xml
      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v2.6.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          JACOCO_SOURCE_PATH: "${{ github.workspace }}/src/main/java"
        with:
          coverageCommand: mvn -B clean verify -Dspotbugs.skip=true --settings .github/settings.xml
          coverageLocations: ${{ github.workspace }}/target/site/jacoco/jacoco.xml:jacoco

      - name: Generate OpenAPI spec
        run: mvn post-integration-test -DgenerateOpenApiDocs=true -DskipTests --settings .github/settings.xml
      
      - name: Update API url in OpenAPI spec
        uses: jossef/action-set-json-field@v1
        with:
          file: target/openapi.json
          field: servers
          value: ${{ inputs.GATEWAY_URLS }}
          parse_json: true
      
      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v1
        with:
          name: OpenApi spec
          path: target/openapi.json
      
  define-vairables:
    if: github.ref == 'refs/tags/**' || github.ref == 'refs/heads/master'
    name: Retrive Variables
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      
      - name: Get commit version
        id: commit
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Get Release version
        if: github.ref == 'refs/tags/**'
        id: version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
    
    outputs:
      commit: ${{ steps.commit.outputs.sha_short }}
      version: ${{ steps.version.outputs.VERSION }}

  build:
    if: github.ref == 'refs/heads/master'
    name: Build
    runs-on: ubuntu-20.04
    needs: ["define-vairables", "test"]

    steps:
      - uses: actions/checkout@v1
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-dependencies
        with:
          path: ~/.m2
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('pom.xml') }}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
      - name: Maven Package
        run: mvn -B clean package -DskipTests -Dspotbugs.skip=true --settings .github/settings.xml

      - name: Gcloud Authentication
        uses: google-github-actions/auth@v0
        with:
          credentials_json:  ${{ secrets.GCP_ACCOUNT_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: '297.0.0'
      
      - name: Configure the docker credentials   
        run: |
          gcloud auth configure-docker --quiet

      - name: Build, tag, and push image to GCR
        id: build-image
        env:
          IMAGE_TAG: ${{ needs.define-vairables.outputs.commit }}
        run: |
          docker build -t ${{ inputs.GCR_REGISTRY }}/${{ inputs.GCR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ inputs.GCR_REGISTRY }}/${{ inputs.GCR_REPOSITORY }}:$IMAGE_TAG
  
  deploy:
    if: github.ref == 'refs/heads/master'
    name: Deploy
    runs-on: ubuntu-20.04
    needs: ["build", "define-vairables"]
    steps:
      - uses: actions/checkout@v1

      - uses: actions/checkout@v2
        with:
          repository: '${{ inputs.GITHUB_ORG }}/${{ inputs.HELM_REPOSITORY }}'
          path: ${{ inputs.HELM_REPOSITORY }}
          ref: ${{ inputs.GITHUB_BRANCH }}
          ssh-key: '${{ secrets.ACTIONS_SSH_KEY }}'

      - name: Gcloud Authentication
        uses: google-github-actions/auth@v0
        with:
          credentials_json:  ${{ secrets.GCP_ACCOUNT_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: '297.0.0'
      
      - name: Configure the docker credentials   
        run: |
          gcloud container clusters get-credentials ${{ inputs.GKE_NAME }} --zone ${{ inputs.GKE_ZONE }} --project ${{ inputs.GKE_PROJECT }}
      
      - name: "Check Helm Version"
        run: helm version 
      
      - name: Deploy to K8S
        env:
          IMAGE_TAG: ${{ needs.define-vairables.outputs.commit }}
        run: |
          echo "${{ secrets.HELM_REGISTRY_KEY }}" | helm registry login ${{ inputs.HELM_REGISTRY }} --username ${{ inputs.GCP_ACCOUNT_USER }} --password-stdin

          if ! helm -n ${{ inputs.HELM_NAMESPACE }} upgrade --install ${{ github.event.repository.name }} --wait '--timeout=${{ inputs.HELM_ROLLOUT_TIMEOUT }}' -f ${{ inputs.HELM_REPOSITORY }}/${{ inputs.HELM_VALUES }} --set-string image.tag=$IMAGE_TAG oci://${{ inputs.HELM_REGISTRY }}/${{ inputs.HELM_CHART }} --version '${{ inputs.HELM_CHART_VERSION }}' ; then
            kubectl -n ${{ inputs.HELM_NAMESPACE }} describe po -l app.kubernetes.io/version=$IMAGE_TAG -l app.kubernetes.io/name=${{ github.event.repository.name }}
            kubectl -n ${{ inputs.HELM_NAMESPACE }} logs --tail=2000 -l app.kubernetes.io/version=$IMAGE_TAG -l app.kubernetes.io/name=${{ github.event.repository.name }} --all-containers || true
            helm -n ${{ inputs.HELM_NAMESPACE }} rollback ${{ github.event.repository.name }} 0
            exit 1
          fi

  publish-docs:
    if: github.ref == 'refs/heads/master'
    name: Publish documentation to Readme.io
    runs-on: ubuntu-latest
    needs: [ "deploy" ]

    steps:
      - name: Download OpenAPI spec
        uses: actions/download-artifact@v1
        with:
          name: OpenApi spec
          path: target/
      - name: Publish OpenAPI spec to readme.io
        run: |
          curl --location --request PUT '${{ inputs.README_URL }}' --header 'x-readme-version: 1.0' --header 'x-readme-source: github' -u '${{ secrets.README_IO_API_KEY }}:' --form 'spec=@target/openapi.json'

      - name: Slack Notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "deployments"
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON: " https://github.com/rtCamp.png?size=48"
          SLACK_MESSAGE: ${{ github.event.head_commit.message }}
          SLACK_TITLE: "Commit_message"
          SLACK_USERNAME: "GitHub Actions"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }} 