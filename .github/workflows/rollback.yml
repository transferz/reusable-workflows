name: Rollback

on:
  workflow_call:
    inputs:
      APP_VERSION:
        type: string
        required: true
      GKE_NAME:
        type: string
        required: true
      GKE_ZONE:
        type: string
        required: true
      GKE_PROJECT:
        type: string
        required: true
      GCP_ACCOUNT_USER:
        type: string
        required: true
      HELM_CHART:
        type: string
        default: "service" 
      HELM_VALUES:
        type: string
        required: true
      HELM_NAMESPACE:
        type: string
        default: "staging"
      HELM_REPOSITORY:
        type: string
        required: true 
      HELM_ROLLOUT_TIMEOUT:
        default: "600s"
        type: string
      HELM_REGISTRY:
        type: string
        required: true
      HELM_CHART_VERSION:
        type: string
        default: "0.4.1"
      GTIHUB_ACTIONS_EMAIL:
        type: string
        required: true
      GITHUB_ORG:
        type: string
        required: true
      GITHUB_BRANCH:
        default: "master"
        type: string
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      ACTIONS_SSH_KEY:
        required: true
      GCP_ACCOUNT_KEY:
        required: true
      HELM_REGISTRY_KEY:
        required: true

env:
  HELM_EXPERIMENTAL_OCI: 1

jobs: 
  rollback:
    name: Rollback 
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          repository: '${{ inputs.GITHUB_ORG }}/${{ inputs.HELM_REPOSITORY }}'
          path: ${{ inputs.HELM_REPOSITORY }}
          ref: ${{ inputs.GITHUB_BRANCH}}
          ssh-key: '${{ secrets.ACTIONS_SSH_KEY }}'

      - name: Gcloud Authentication
        uses: google-github-actions/auth@v0
        with:
          credentials_json:  ${{ secrets.GCP_ACCOUNT_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: '297.0.0'

      - name: Generate Kubeconfig
        run: |
          gcloud container clusters get-credentials ${{ inputs.GKE_NAME }} --zone ${{ inputs.GKE_ZONE }} --project ${{ inputs.GKE_PROJECT }}
    
      - name: Deploy to K8S
        env:
          VERSION_TAG: ${{ inputs.APP_VERSION }}
        run: |
          echo "${{ secrets.HELM_REGISTRY_KEY }}" | helm registry login ${{ inputs.HELM_REGISTRY }} --username ${{ inputs.GCP_ACCOUNT_USER }} --password-stdin

          if ! helm -n ${{ inputs.HELM_NAMESPACE }} upgrade --install ${{ github.event.repository.name }} --wait '--timeout=${{ inputs.HELM_ROLLOUT_TIMEOUT }}' -f ${{ inputs.HELM_REPOSITORY }}/${{ inputs.HELM_VALUES }} --set-string image.tag="${VERSION_TAG}"  oci://${{ inputs.HELM_REGISTRY }}/${{ inputs.HELM_CHART }} --version '${{ inputs.HELM_CHART_VERSION }}' ; then
            kubectl -n ${{ inputs.HELM_NAMESPACE }} describe po -l app.kubernetes.io/version=${IMAGE_TAG} -l app.kubernetes.io/name=${{ github.event.repository.name }}
            kubectl -n ${{ inputs.HELM_NAMESPACE }} logs --tail=2000 -l app.kubernetes.io/version=${IMAGE_TAG} -l app.kubernetes.io/name=${{ github.event.repository.name }} --all-containers || true
            exit 1
          fi

      - name: Update staging value.yaml
        uses: mikefarah/yq@master
        env:
          VERSION_TAG: ${{ inputs.APP_VERSION }}
        with:
          cmd: yq -i ".image.tag = env(VERSION_TAG)" ${{ inputs.HELM_REPOSITORY }}/${{ inputs.HELM_VALUES }}
      
      - name: Push changes to git
        working-directory: ${{ inputs.HELM_REPOSITORY }}
        run: |
          echo "${{ secrets.ACTIONS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          git config --global user.name "GitHub Actions"
          git config --global user.email ${{ inputs.GTIHUB_ACTIONS_EMAIL }}

          git add .
          git commit -m "[skip ci] update snapshot version for ${{ github.event.repository.name }}"
          git pull origin master --rebase && git push

      - name: Slack Notification
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "deployments"
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON: " https://github.com/rtCamp.png?size=48"
          SLACK_MESSAGE: "Rollback to ${{ inputs.APP_VERSION }} version"
          SLACK_TITLE: "Message"
          SLACK_USERNAME: "GitHub Actions"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}  
